
// -------- Standard http server example from Node --------

//   var http = require('http');
//   http.createServer(function (req, res) {
//     res.writeHead(200, {'Content-Type': 'text/plain'});
//     res.end('Hello World\n');
//   }).listen(1337, '127.0.0.1');
//   console.log('Server running at http://127.0.0.1:1337/');

//   cb 'http' 1>require >.createServer
//   1337 '127.0.0.1' rot 2>.listen drop
//   'Server running at http://127.0.0.1:1337/' . wait swap drop dup
//     200 `{'Content-Type':'text/plain'} rot 2>.writeHead
//     'Hello World ' swap 1>.end


// -------- Examples from the docs --------

//  'Hello World' .

// -- from *Comments* section
//  1 1 + .  // prints "2" on stdout
//  1 1 * .  // prints "1" on stdout

// -- from *Named Variables* section
    3 x= x .

// -- from *Functions* section
//   ( "hello world" . )                  // creates and runs function, prints "hello world"
//  :( "hello world" . ) printGreeting=	  // creates function and assigns it to a variable
//  printGreeting						  // runs function, prints "hello world"

// -- from *Word Modifers* section
//  1 3 2    Math.min . // Prints "Infinity" (Math.min())   Leaves 3 items on stack
//  1 3 2   >Math.max .	// Prints "3" (Math.max(1, 3, 2))   Leaves empty stack
//  1 3 2  2>Math.min .	// Prints "2" (Math.min(3, 2))      Leaves 1 item on stack
//  1 3 2  2>( >. )     // Prints "3 2"                     Leaves 1 item on stack

// -- from *Word Modifers* section
//  1 3 2 Math   .min . // Prints "Infinity" (Math.min())
//  1 3 2 Math  >.max .	// Prints "3" (Math.max(1, 3, 2))   Leaves empty stack
//  1 3 2 Math 2>.min .	// Prints "2" (Math.min(3, 2))      Leaves 1 item on stack

// -- from *Word Modifers* section
//	1 x=  x .		// prints "1"
//	1 x= :x .		// prints "x"
//	 Math.min .		// prints "Infinity"
//	:Math.min .		// prints "[Function: min]"
//	 ( 1 2 + ) .	// prints "3"
//	:( 1 2 + ) .	// prints "[Function]"

// -- from *Multiple Stacks* section
//	1 3 2 ( @2 >Math.min . ) // prints "2" and leaves one item on stack
//	1 3 2 ( @ . @ . @ . )	 // prints "2", then "3", then "1"
//	1 3 2 ( @3 >. )          // prints "1 3 2"

// -- from *Multiple Stacks* section
    :(<2 >. ) print2=	   	// defines a function and assigns it to a variable
    1 3 2 >print2           // prints "3 2" and leaves one item on the stack

// -- from *Multiple Stacks* section
    1 3 2 >(< >. )   		// prints "1 3 2" by using function arguments

// -- from *Named Variable Scopes* section
	1 x=		// assign 1 to x
	( 2 y= )	// anonymous function executed with var y in local scope
	typeof:y .	// prints "undefined"
	( 3 x= )  	// var x is from outer scope
	x .			// prints 3

// -- from *Special Operator Prefixes* section
	`{x:1} obj=		    		// assign object to var obj
    ( with:obj x . )			// prints 1 (with goes to end of function
    typeof:x .					// prints "undefined"
    :abc instanceof:string .	// prints "true"

